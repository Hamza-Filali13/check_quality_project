# # Docker Compose Override for Enhanced Data Quality Dashboard
# version: '3.8'

# services:
#   streamlit:
#     environment:
#       # Enhanced configuration
#       - STREAMLIT_SERVER_HEADLESS=true
#       - STREAMLIT_SERVER_ENABLE_CORS=false
#       - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
#       - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
#       - STREAMLIT_THEME_PRIMARY_COLOR=#1f4e79
#       - STREAMLIT_THEME_BACKGROUND_COLOR=#ffffff
#       - STREAMLIT_THEME_SECONDARY_BACKGROUND_COLOR=#f0f2f6
#       - STREAMLIT_THEME_TEXT_COLOR=#262730
      
#       # Airflow integration
#       - AIRFLOW_HOST=airflow-webserver
#       - AIRFLOW_PORT=8080
#       - AIRFLOW_USERNAME=airflow
#       - AIRFLOW_PASSWORD=airflow
      
#       # Enhanced security
#       - APP_SECRET=your-secret-key-change-in-production
#       - SESSION_TIMEOUT=3600
      
#     volumes:
#       - ./streamlit_app/config.yaml:/app/config.yaml:ro
#       - ./logs/streamlit:/app/logs
    
#     # Health check
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 40s

#   postgres:
#     environment:
#       # Enhanced PostgreSQL configuration
#       - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
#       - POSTGRES_LOG_STATEMENT=all
#       - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./logs/postgres:/var/log/postgresql
    
#     # Health check
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Optional: Add Redis for caching
#   redis:
#     image: redis:7-alpine
#     container_name: dq_redis
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     command: redis-server --appendonly yes
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 3s
#       retries: 3

#   # Optional: Add monitoring with Prometheus
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: dq_prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/etc/prometheus/console_libraries'
#       - '--web.console.templates=/etc/prometheus/consoles'
#       - '--web.enable-lifecycle'

#   # Optional: Add Grafana for advanced dashboards
#   grafana:
#     image: grafana/grafana:latest
#     container_name: dq_grafana
#     ports:
#       - "3000:3000"
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
#       - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

# volumes:
#   postgres_data:
#     driver: local
#   redis_data:
#     driver: local
#   prometheus_data:
#     driver: local
#   grafana_data:
#     driver: local

# networks:
#   default:
#     name: dq_network
#     driver: bridge